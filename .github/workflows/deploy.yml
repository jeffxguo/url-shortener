# deploy.yml

name: Deploy to AWS ECS

# This workflow runs on every push to the 'main' branch
on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_BACKEND: url-shortener/backend
  ECR_REPOSITORY_FRONTEND: url-shortener/frontend
  ECS_CLUSTER_NAME: url-shortener-cluster
  ECS_SERVICE_NAME_BACKEND: backend-service
  ECS_SERVICE_NAME_FRONTEND: frontend-service

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-image-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND

    - name: Force new ECS deployment
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME_BACKEND --force-new-deployment
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME_FRONTEND --force-new-deployment